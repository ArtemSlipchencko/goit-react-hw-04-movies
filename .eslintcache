[{"C:\\Users\\pfist\\Documents\\GitHub\\goit-react-hw-04-movies\\src\\index.js":"1","C:\\Users\\pfist\\Documents\\GitHub\\goit-react-hw-04-movies\\src\\App.jsx":"2","C:\\Users\\pfist\\Documents\\GitHub\\goit-react-hw-04-movies\\src\\Pages\\HomePage.jsx":"3","C:\\Users\\pfist\\Documents\\GitHub\\goit-react-hw-04-movies\\src\\Pages\\MoviesPage.jsx":"4","C:\\Users\\pfist\\Documents\\GitHub\\goit-react-hw-04-movies\\src\\Pages\\MovieDetailsPage.jsx":"5","C:\\Users\\pfist\\Documents\\GitHub\\goit-react-hw-04-movies\\src\\service\\API.js":"6","C:\\Users\\pfist\\Documents\\GitHub\\goit-react-hw-04-movies\\src\\service\\genres.js":"7","C:\\Users\\pfist\\Documents\\GitHub\\goit-react-hw-04-movies\\src\\Components\\Cast\\Cast.jsx":"8","C:\\Users\\pfist\\Documents\\GitHub\\goit-react-hw-04-movies\\src\\Components\\Reviews\\Reviews.jsx":"9","C:\\Users\\pfist\\Documents\\GitHub\\goit-react-hw-04-movies\\src\\service\\queryFetch.js":"10"},{"size":241,"mtime":1606918624429,"results":"11","hashOfConfig":"12"},{"size":872,"mtime":1607159696148,"results":"13","hashOfConfig":"12"},{"size":1223,"mtime":1607161267825,"results":"14","hashOfConfig":"12"},{"size":1708,"mtime":1607161670998,"results":"15","hashOfConfig":"12"},{"size":2668,"mtime":1607161468345,"results":"16","hashOfConfig":"12"},{"size":367,"mtime":1607014302644,"results":"17","hashOfConfig":"12"},{"size":205,"mtime":1607085987293,"results":"18","hashOfConfig":"12"},{"size":764,"mtime":1607101001525,"results":"19","hashOfConfig":"12"},{"size":686,"mtime":1607102615826,"results":"20","hashOfConfig":"12"},{"size":226,"mtime":1607103924592,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"3qz1a4",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\pfist\\Documents\\GitHub\\goit-react-hw-04-movies\\src\\index.js",[],["45","46"],"C:\\Users\\pfist\\Documents\\GitHub\\goit-react-hw-04-movies\\src\\App.jsx",[],"C:\\Users\\pfist\\Documents\\GitHub\\goit-react-hw-04-movies\\src\\Pages\\HomePage.jsx",[],"C:\\Users\\pfist\\Documents\\GitHub\\goit-react-hw-04-movies\\src\\Pages\\MoviesPage.jsx",["47"],"import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport fetchFilms from '../service/API.js';\r\nimport queryFetch from '../service/queryFetch.js';\r\n\r\nclass MoviesPage extends Component {\r\n\r\n    state = {\r\n        query: \"\",\r\n        films: [],\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const {query} = this.state;\r\n        queryFetch(query).then(res => this.setState({films: res.data.results}));\r\n    };\r\n\r\n    handleChange = ({target}) => {\r\n        this.setState({query: target.value})\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <ul>\r\n                    <li><Link to=\"/\">Home</Link></li>\r\n                    <li><Link to=\"/movies\">Movies</Link></li>\r\n                </ul>\r\n                <h1>Movies</h1>\r\n                <form onSubmit={this.handleSubmit} >\r\n                    <input type=\"text\" onChange={this.handleChange} value={this.state.query} />\r\n                    <button type=\"submit\">Search</button>\r\n                </form>\r\n                <ul>\r\n                    {\r\n                        this.state.films.map(el => {\r\n                            return (\r\n                                <li key={el.id}>\r\n                                    <Link to={{\r\n                                        pathname: `/movies/${el.id}`,\r\n                                        state: {from: this.props.match.url}\r\n                                    }}>{el.title}</Link>\r\n                                </li>\r\n                            )\r\n                        })\r\n                    }\r\n                </ul>\r\n            </>\r\n        )\r\n    }\r\n\r\n};\r\n\r\nexport default MoviesPage;","C:\\Users\\pfist\\Documents\\GitHub\\goit-react-hw-04-movies\\src\\Pages\\MovieDetailsPage.jsx",["48","49"],"import React, {Component} from 'react';\r\nimport fetchFilms from '../service/API.js';\r\nimport {Route, Link} from 'react-router-dom';\r\nimport Cast from '../Components/Cast/Cast';\r\nimport Reviews from '../Components/Reviews/Reviews';\r\nimport getGenres from '../service/genres.js';\r\n\r\nclass MovieDetailsPage extends Component {\r\n\r\n    state = {\r\n        film: null,\r\n        genres: null\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const {movieId} = this.props.match.params;\r\n        fetchFilms(movieId).then(res => this.setState({film: res.data}));\r\n        getGenres().then(res => this.setState({genres: res.data.genres}));\r\n\r\n    }\r\n\r\n    handleGoBack = () => {\r\n        this.props.history.push(this.props.location.state.from)\r\n    }\r\n\r\n    render() {\r\n\r\n        const {film, genres} = this.state;\r\n        let genreStr = \"\";\r\n        if (film && genres) {\r\n            genres.map(elOfgenres => {\r\n                film.genres.map(elOfFilmGenres => {\r\n                    if(elOfgenres.id === elOfFilmGenres.id) {\r\n                        genreStr += ` ${elOfgenres.name}`;\r\n                    }\r\n                })\r\n            })\r\n        };\r\n        \r\n        return (\r\n            <>\r\n                <div>\r\n                    <button onClick={this.handleGoBack} >Go back</button>\r\n                    <h1>{film ? film.original_title : null}</h1>\r\n                    <p>User score: {film ? `${film.vote_average * 10}%` : null}</p>\r\n                    <img src={film ? `https://image.tmdb.org/t/p/w500${film.backdrop_path}` : null} alt=\"\"/>\r\n                    <h2>Genres:</h2>\r\n                    <p>{genreStr}</p>\r\n                    <h2>Overview:</h2>\r\n                    <p>{film ? film.overview : null}</p>\r\n                    <Link to={{\r\n                        pathname: `${this.props.match.url}/cast`,\r\n                        state: {\r\n                            movieId: this.props.match.params.movieId,\r\n                            from: this.props.location.state.from\r\n                        }\r\n                    }}>Cast/</Link>\r\n                    <Link to={{\r\n                        pathname: `${this.props.match.url}/reviews`,\r\n                        state: {\r\n                            movieId: this.props.match.params.movieId,\r\n                            from: this.props.location.state.from\r\n                        }\r\n                    }}>/Reviews</Link>\r\n\r\n                    <Route exact path=\"/movies/:movieId/cast\" component={Cast} />\r\n                    <Route path=\"/movies/:movieId/reviews\" component={Reviews} />\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n};\r\n\r\nexport default MovieDetailsPage;","C:\\Users\\pfist\\Documents\\GitHub\\goit-react-hw-04-movies\\src\\service\\API.js",[],"C:\\Users\\pfist\\Documents\\GitHub\\goit-react-hw-04-movies\\src\\service\\genres.js",[],"C:\\Users\\pfist\\Documents\\GitHub\\goit-react-hw-04-movies\\src\\Components\\Cast\\Cast.jsx",[],"C:\\Users\\pfist\\Documents\\GitHub\\goit-react-hw-04-movies\\src\\Components\\Reviews\\Reviews.jsx",[],"C:\\Users\\pfist\\Documents\\GitHub\\goit-react-hw-04-movies\\src\\service\\queryFetch.js",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":3,"column":8,"nodeType":"56","messageId":"57","endLine":3,"endColumn":18},{"ruleId":"58","severity":1,"message":"59","line":32,"column":35,"nodeType":"60","messageId":"61","endLine":32,"endColumn":37},{"ruleId":"58","severity":1,"message":"59","line":33,"column":48,"nodeType":"60","messageId":"61","endLine":33,"endColumn":50},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'fetchFilms' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]